#!/usr/bin/env python

# -*- coding: utf-8 -*-
"""
Created on Wed Apr 24 11:18:19 2013

@author: edouard.duchesnay@cea.fr
@author: benoit.da_mota@inria.fr
@author: jinpeng.li@cea.fr
"""

import sys
import optparse
import numpy as np
from epac import conf, StoreFs, StoreMem, key_pop
#from epac import 

def load_datasets(datasets_filepath):
    Xy = np.load(datasets_filepath)
    return {k: Xy[k] for k in Xy.keys()}


if __name__ == "__main__":
    # parse command line options
    parser = optparse.OptionParser()
    parser.add_option('-d', '--datasets',
                      help='File path to ".npz" datasets called X.')
    parser.add_option('-f', '--format',
                      help='datasets format default numpy archive ".npz"')
    parser.add_option('-k', '--keys',
                      help='Key(s) of node(s) to be processed. ' + \
                      'You can put multiple keys using a separating sign ";".')
    parser.add_option('-s', '--keysfile',
                      help='Key(s) of node(s) to be processed. ' + \
                      'Those keys are saved in a file. Each line ' + \
                      'represents a key node')
    parser.add_option('-x', '--function',
                      help='Function to execute. Default "fit_predict"')
    #argv = ['/home/ed203246/git/pylearn-epac/bin/epac_mapper', '--datasets=./epac_datasets.npz', '--keysfile=./0.job']
    #options, args = parser.parse_args(argv)
    options, args = parser.parse_args(sys.argv)

    # Set default values to parameters
    datasets_filepath = None
    datasets_format = "npz"
    keys = None
    listkey = list()
    function = "fit_predict"

    if options.datasets != None:
        datasets_filepath = repr(options.datasets)
        # To remove quote signs in the path
        datasets_filepath = datasets_filepath.replace("'", '')
        datasets_filepath = datasets_filepath.replace('"', '')
    else:
        raise ValueError("key(s) is not provided use: --datasets")

    if options.format != None:
        datasets_format = repr(options.format)

    if options.keys != None:
        keys = repr(options.keys)
        # To remove quote sisgns in the path
        keys = keys.replace("'", '')
        keys = keys.replace('"', '')
        listkey = keys.split(";")
    elif options.keysfile != None:
        relative_filepath = options.keysfile
        relative_filepath = relative_filepath.replace("'", '')
        relative_filepath = relative_filepath.replace('"', '')
        key_lines = None
        f = open(relative_filepath, 'r')
        key_lines = f.readlines()
        f.close()
        if key_lines:
            for key_line in key_lines:
                key_line = key_line.strip('\n')
                key_line = key_line.strip()
                key_line = key_line.replace("'", '')
                key_line = key_line.replace('"', '')
                listkey.append(key_line)
    else:
        raise ValueError("key(s) is not provided use: --key")

    if options.function != None:
        function = repr(options.function)
    # Load datasets
    # print "datasets_filepath:", datasets_filepath
    # print "keys:", keys
    # datasets_filepath = "/tmp/tmpZ2HqYb_datasets.npz"
    # datasets_filepath ="/tmp/tmpO8D3dG_datasets.npz"
    # keys="fs:///tmp/tmpXyC_XE/ParPerm/Perm(nb=0)"
    Xy = load_datasets(datasets_filepath)
    tree_root_relative_path = "./epac_tree"
    store_fs = StoreFs(tree_root_relative_path)
    tree = store_fs.load(key=conf.STORE_EXECUTION_TREE_PREFIX)
    # Execute once what is commum acccross all keys
    # FIX ME, This should not always work
    common_key, _ = key_pop(os.path.commonprefix(listkey))
    common_parent = tree.get_node(common_key)
    # Root to commun node, overwrite Xy since they won't be use anymore
    for node_root2common in common_parent.get_path_from_root():
        print node_root2common
        #print parent_node
        func = getattr(node_root2common, function)
        Xy = func(recursion=False, **Xy)
    # Execute what is specific to each keys
    for curr_key in listkey:
        cpXy = Xy
        print curr_key
        # curr_key = 'Permutations/Perm(nb=3)'
        curr_node = tree.get_node(curr_key)
        for node_common2curr in curr_node.get_path_from_node(common_parent):
            if node_common2curr is  common_parent: # skip commom ancestor
                continue
            if node_common2curr is  curr_node: # do not process current node
                break
            print node_common2curr            
            func = getattr(node_common2curr, function)
            cpXy = func(recursion=False, **cpXy)
        # print "Recursively run from root to current node"
        curr_node.store = StoreMem()
        func = getattr(curr_node, function)
        func(recursion=True, **cpXy)
        # print "Save results"
        curr_node.save_node(store=store_fs)
        #store_fs.load()
