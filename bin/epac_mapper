#!/usr/bin/env python

# -*- coding: utf-8 -*-
"""
Created on Wed Apr 24 11:18:19 2013

@author: edouard.duchesnay@cea.fr
@author: benoit.da_mota@inria.fr
@author: jinpeng.li@cea.fr
"""

import sys
import optparse
import numpy as np
from epac import  WF

def load_workflow(key):
    pass
def load_datasets(datasets_filepath):
    Xy = np.load(datasets_filepath)
    return {k:Xy[k] for k in Xy.keys()}


if __name__ == "__main__":
    # parse command line options
    
    parser = optparse.OptionParser()
    
    parser.add_option('-d', '--datasets', 
                      help='File path to ".npz" datasets called X.')
    parser.add_option('-f', '--format', 
                      help='datasets format default numpy archive ".npz"')
    parser.add_option('-k', '--keys',  
                      help='Key(s) of node(s) to be processed. \
You can put multiple keys using a separating sign ";".')
    parser.add_option('-s', '--keysfile',  
                      help='Key(s) of node(s) to be processed. \
Those keys are saved in a file. Each line \
represents a key node')
    parser.add_option('-x', '--function',  
                      help='Function to execute. Default "fit_predict"')

    options, args = parser.parse_args(sys.argv)

    # Set default values to parameters
    datasets_filepath = None
    datasets_format = "npz"
    keys = None
    listkey = list()
    function = "fit_predict"
    
    if options.datasets != None:
        datasets_filepath   =repr(options.datasets)
        # To remove quote signs in the path
        datasets_filepath   =datasets_filepath.replace("'",'')
        datasets_filepath   =datasets_filepath.replace('"','')
    else:
        raise ValueError("key(s) is not provided use: --datasets")
        
    if options.format != None:
        datasets_format     =repr(options.format)
    
    if options.keys != None:
        
        keys                =repr(options.keys)
        # To remove quote sisgns in the path
        keys                =keys.replace("'",'')
        keys                =keys.replace('"','')
        listkey=keys.split(";")
        
    elif options.keysfile != None:
        
        relative_filepath    =options.keysfile   
        relative_filepath    =relative_filepath.replace("'",'')
        relative_filepath    =relative_filepath.replace('"','')
        
        key_lines = None
        
        f = open(relative_filepath, 'r')
        key_lines=f.readlines()
        f.close()

                    
        if key_lines :
            for key_line in key_lines:
                key_line=key_line.strip('\n')
                key_line=key_line.strip()
                key_line=key_line.replace("'",'')
                key_line=key_line.replace('"','')
                listkey.append(key_line)
    else:
        raise ValueError("key(s) is not provided use: --key")


    if options.function != None:
        function            =repr(options.function)

    # Load datasets
    # print "datasets_filepath:", datasets_filepath
    # print "keys:", keys
    # datasets_filepath = "/tmp/tmpZ2HqYb_datasets.npz"
    # datasets_filepath ="/tmp/tmpO8D3dG_datasets.npz"
    # keys="fs:///tmp/tmpXyC_XE/ParPerm/Perm(nb=0)"
    Xy = load_datasets(datasets_filepath)


    for key in listkey:
    
        node = WF.load(key)
        
        cpXy=Xy
        
        # print "Sequentially run from root to current node"
        for parent_node in node.get_path_from_root()[:-1]:
            func = getattr(parent_node, function)
            cpXy = func(recursion=False, **cpXy)
        # print "Recursively run from root to current node"
        func = getattr(node, function)
        cpXy = func(recursion=True, **cpXy)
        # print "Save results"
        node.save(attr="results")
    