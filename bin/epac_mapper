#!/usr/bin/env python

# -*- coding: utf-8 -*-
"""
Created on Wed Apr 24 11:18:19 2013

@author: edouard.duchesnay@cea.fr
@author: benoit.da_mota@inria.fr
"""

import sys
import os.path
import getopt
import numpy as np
from epac import  WF

def load_workflow(key):
    pass
def load_datasets(datasets_filepath):
    Xy = np.load(datasets_filepath)
    return {k:Xy[k] for k in Xy.keys()}

def help(cmd):
    help_str = """
    Usage: %s [Options]

    Options:

      -h, --all                  Print this help.
      -d, --datasets             Filepath to ".npz" datasets called X.
      -f, --format               datasets format default numpy archive ".npz"
      -k, --keys                 Key(s) of node(s) to be processed.
      -f, --function             Function to execute. Default "fit_predict"
    """ % os.path.basename(cmd)
    print help_str

if __name__ == "__main__":
    # parse command line options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "d:f:k:h",
                                   ["datasets=", "format=", "keys=", "help"])
    except getopt.error, msg:
        print msg
        print "for help use --help"
        sys.exit(2)
    datasets_filepath = None
    datasets_format = "npz"
    keys = None
    function = "fit_predict"
    # Process options
    for o, a in opts:
        if o in ("-h", "--help"):
            help(sys.argv[0])
            sys.exit(0)
        if o in ("-d", "--datasets"):
            datasets_filepath = a
        if o in ("-f", "--format"):
            datasets_format = a
        if o in ("-k", "--keys"):
            keys = a
        if o in ("-f", "--function"):
            function = a
    # Load datasets
    print "datasets_filepath:", datasets_filepath
    print "keys:", keys
    if not keys:
        raise ValueError("key(s) is not provided use: --key")
    if not datasets_filepath:
        raise ValueError("key(s) is not provided use: --datasets")
    #datasets_filepath = "/tmp/tmpZ2HqYb_datasets.npz"
    #datasets_filepath="/tmp/tmpO8D3dG_datasets.npz"
    #keys="fs:///tmp/tmpXyC_XE/ParPerm/Perm(nb=0)"
    Xy = load_datasets(datasets_filepath)
    node = WF.load(keys)
    print "Sequentially run from root to current node"
    for parent_node in node.get_path_from_root()[:-1]:
        func = getattr(parent_node, function)
        Xy = func(recursion=False, **Xy)
    print "Recursively run from root to current node"
    func = getattr(node, function)
    Xy = func(recursion=True, **Xy)
    print "Save results"
    node.save(attr="results")